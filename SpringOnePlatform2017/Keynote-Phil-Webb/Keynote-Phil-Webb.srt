1
00:00:10,380 --> 00:00:14,700
이번에 발표하게될 연사를 소개할 수 있어 영광입니다

2
00:00:14,880 --> 00:00:19,400
개인적으로 좋아하는 사람이자 트위터에서 팔로우해야 할

3
00:00:19,520 --> 00:00:21,860
만약 팔로우 하고 있지 않다면 당장 전화기를 들고 팔로우 하시구요

4
00:00:21,860 --> 00:00:24,720
드라이한 영국식 유머에 능통한,

5
00:00:24,720 --> 00:00:27,460
스프링 부트 프로젝트의 리드인

6
00:00:27,460 --> 00:00:29,580
필 웹을 소개합니다. 환영해 주세요

7
00:00:30,540 --> 00:00:31,680
무대로 나오세요 필

8
00:00:32,220 --> 00:00:39,460
[BGM과 함께 필 웹이 등장]

9
00:00:41,040 --> 00:00:43,960
감사합니다. 이 무대에 서게 되어 영광이구요

10
00:00:43,960 --> 00:00:46,220
사실 예상치 못한 무대이긴 합니다

11
00:00:46,680 --> 00:00:48,940
이 키노트 세션의 주제는

12
00:00:49,000 --> 00:00:51,480
'모든것은 변한다'는 점은 절대 변하지 않는다' 입니다

13
00:00:51,900 --> 00:00:53,860
매우 적절한 주제라고 생각하는데요

14
00:00:54,220 --> 00:00:57,080
왜냐하면 아무도 관심을 두지 않기때문이죠

15
00:00:57,880 --> 00:01:00,780
앤디 윌킨슨은 살을 찌우는 대신

16
00:01:00,820 --> 00:01:02,340
수염을 기르고 있는데요

17
00:01:03,180 --> 00:01:05,820
불행히도 올해는 컨퍼런스에 참석할 수 없었습니다

18
00:01:05,820 --> 00:01:08,860
하여 이 키노트 세션을 진행할 수 없었구요

19
00:01:08,860 --> 00:01:13,020
그래서 제가 대신 앤디가 만든 슬라이드의 리믹스 버전으로 진행합니다

20
00:01:13,020 --> 00:01:15,040
만일 원본이 궁금하시다면

21
00:01:15,040 --> 00:01:18,120
유튜브에서 Spring IO 와

22
00:01:18,120 --> 00:01:20,980
바르셀로나 키노트를 함께 검색하면

23
00:01:20,980 --> 00:01:22,720
이 발표의 앤디 버전을 확인할 수 있습니다

24
00:01:26,380 --> 00:01:27,900
인용으로 시작합니다

25
00:01:28,400 --> 00:01:33,080
가장 강하거나, 똑똑한 종이 살아남는 것이 아니라

26
00:01:33,080 --> 00:01:35,860
변화에 가장 잘 적응하는 종이 살아남는 것이다

27
00:01:37,100 --> 00:01:40,260
이 말이 마치 다윈이 쓴 것같다고 느끼신다면

28
00:01:40,480 --> 00:01:43,400
맞습니다. 이건 다윈이 쓴 것 같이 들리죠

29
00:01:43,400 --> 00:01:46,460
하지만 이건 사실 리온 메긴슨이 쓴 문장인데

30
00:01:46,460 --> 00:01:49,000
이 사람은 동물에 대한 말을 한 것이 아니라

31
00:01:49,000 --> 00:01:51,640
비지니스 세계에 대한 것이었습니다

32
00:01:54,260 --> 00:01:55,260
그리고 음,

33
00:01:55,560 --> 00:01:59,060
제가 이 인용구를 좋아하는 이유는, 소프트웨어에도 적용되기 때문입니다

34
00:01:59,300 --> 00:02:02,240
이런 생각을 하는건 저 뿐만이 아닌데요

35
00:02:02,240 --> 00:02:05,180
마이크로 소프트의 Caitie 의 트위터를 인용해 보자면

36
00:02:05,180 --> 00:02:08,220
그녀가 받았던 가장 좋은 디자인에 관한 충고는

37
00:02:08,220 --> 00:02:09,680
너는 반드시 틀린다

38
00:02:10,500 --> 00:02:14,300
때문에 코드를 미래에 수정하기 쉬운 방향으로 최적화 해야한다

39
00:02:14,300 --> 00:02:16,120
즉 코드를 수정하기 쉽게 만들고

40
00:02:16,120 --> 00:02:19,560
변경하기 쉽게 만들어, 결국 변화에 적응하게 만들어야 한다는 것 입니다

41
00:02:21,080 --> 00:02:24,060
그렇다면 스프링은 '적응'을 위해 여러분을 어떻게 도울까요

42
00:02:24,060 --> 00:02:27,480
스프링은 여러분이 '적응' 가능한 코드를 작성하도록 어떻게 도울까요

43
00:02:28,820 --> 00:02:32,000
스프링이 제공하는 방법중 하나는, 선택을 제공하는 것입니다

44
00:02:33,060 --> 00:02:36,420
많은 사람들이 스프링 프레임웍을 의존성 주입 프레임웍으로 생각합니다

45
00:02:36,420 --> 00:02:39,140
저는 스프링을 그런 방식으로 생각하진 않습니다

46
00:02:39,140 --> 00:02:41,820
스프링은 인티그레이션 프레임워크 입니다

47
00:02:41,820 --> 00:02:45,160
스프링은 여러분이 사용하고자 하는 수많은 기술들을 제공하고자 디자인 되었고

48
00:02:45,160 --> 00:02:48,160
그런 기술들을 자연스럽게 결합 하도록 합니다

49
00:02:48,240 --> 00:02:51,320
스프링은 또한 일관적인 프로그래밍 모델을 제공하며

50
00:02:51,320 --> 00:02:54,680
이런 것들을 이루기 위해 의존성 주입을 사용하는거죠

51
00:02:55,680 --> 00:02:57,960
이 부분에 대해 조금 더 시간을 할애해 보자면

52
00:02:57,960 --> 00:03:01,620
여러분이 개발자로서 가질 수 있는 선택에 관한 부분입니다

53
00:03:01,620 --> 00:03:04,420
그리고 저희 스프링팀의 멤버로서의 선택

54
00:03:04,420 --> 00:03:06,800
이런 선택들로 인해 여러분의 선택이 결정되죠

55
00:03:08,820 --> 00:03:11,780
시작하기 전에 사례에 대해 이야기 하고 싶은데요

56
00:03:11,780 --> 00:03:15,600
'적응'을 제대로 하지 못한 것들에 대한 사례입니다

57
00:03:15,600 --> 00:03:16,780
이건데요

58
00:03:18,260 --> 00:03:21,000
이건 노키아 6610 전화기 입니다

59
00:03:22,120 --> 00:03:24,260
이 전화기를 선택한 이유는

60
00:03:24,260 --> 00:03:26,660
이 전화기가 발매된 시점이 바로

61
00:03:26,660 --> 00:03:28,680
스프링 프레임워크의 첫 버전이 발표된 시점이기 때문입니다

62
00:03:29,640 --> 00:03:32,620
이 전화기에 대해 좀 설명해 보자면

63
00:03:32,620 --> 00:03:35,400
이 전화기는 725킬로바이트의 램,

64
00:03:35,740 --> 00:03:38,740
믿거나 말거나 자바를 구동하기에 충분한 크기죠

65
00:03:40,420 --> 00:03:43,340
(웃음) 
네, 이건 마이크로 버전의 자바를 구동할 수 있는 크기의 램이죠

66
00:03:43,340 --> 00:03:45,440
실제로 이 전화기에 탑재 되었었구요

67
00:03:46,480 --> 00:03:50,140
그리고 780 밀리 암페어의 배터리

68
00:03:50,440 --> 00:03:54,680
최신 버전의 아이폰보다 2000 밀리 암페어가 부족하죠

69
00:03:55,120 --> 00:03:59,040
또는 지금 여러분의 주머니에 있는 전화기 보다 적은 용량이지만 더 오래갈 겁니다

70
00:03:59,040 --> 00:04:00,900
[청중 웃음]

71
00:04:01,120 --> 00:04:02,120
이건

72
00:04:02,840 --> 00:04:07,380
그리고 128x128의 해상도를 가진 픽셀 디스플레이가 장착 되었죠

73
00:04:07,600 --> 00:04:10,720
4096 색상을 지원합니다

74
00:04:10,720 --> 00:04:13,740
여기서 표현 가능한 이미지를 구형 티비로 옮겨 보자면

75
00:04:14,540 --> 00:04:16,980
최신의 티비로 바꿔보죠

76
00:04:16,980 --> 00:04:19,740
이 크기의 이미지는 아마 요정도일 겁니다

77
00:04:19,740 --> 00:04:21,500
아마 우표 정도의 크기가 되겠네요

78
00:04:22,020 --> 00:04:25,260
그리고 지금 가지고 계신 전화기의 아이콘 크기일 수도 있겠네요

79
00:04:29,960 --> 00:04:32,940
이 전화기에 없는 기능 중 하나는

80
00:04:32,940 --> 00:04:35,360
카메라가 없습니다. 셀카는 불가능하구요

81
00:04:37,640 --> 00:04:40,460
헤드폰 소켓 역시 없습니다

82
00:04:40,800 --> 00:04:44,280
최근의 전화기라면 상상도 할 수 없는

83
00:04:44,320 --> 00:04:47,580
헤드폰 소켓이 없는 전화기였던 것이죠

84
00:04:47,880 --> 00:04:52,980
[청중 웃음]
(최신 아이폰은 헤드폰 소켓이 없다)

85
00:04:56,180 --> 00:04:59,000
이 전화기를 보여드린 이유는

86
00:04:59,020 --> 00:05:01,100
이 전화기를 구하는 것이 가능하구요

87
00:05:01,100 --> 00:05:02,900
유지하는 것이 가능합니다.

88
00:05:02,900 --> 00:05:07,040
배터리를 교환하고, 스크린을 청소하고

89
00:05:07,040 --> 00:05:08,500
눌리지 않는 버튼을 교환할 수 있습니다

90
00:05:09,260 --> 00:05:12,280
하지만 대부분의 사람들은 이 전화기를 찾지 않는데

91
00:05:12,280 --> 00:05:14,620
최신의 스마트폰이 훨씬 좋기 때문이죠

92
00:05:14,620 --> 00:05:16,420
이 전화기는 적응에 실패했습니다

93
00:05:17,340 --> 00:05:20,340
이건 제시카 커의 문장을 인용 해서 설명드릴께요

94
00:05:20,340 --> 00:05:23,260
그녀가 말하길, "소프트웨어 유지는

95
00:05:23,260 --> 00:05:26,220
이전과 같이 동작하게끔 유지하는 것이 아니라

96
00:05:26,220 --> 00:05:29,660
변화하는 환경 속에서 항상 쓸모있도록 하는 것이다"

97
00:05:31,640 --> 00:05:36,700
그럼 스프링은 '쓸모있는' 선택이 무엇인지 어떻게 알까요

98
00:05:38,140 --> 00:05:40,380
이를 알 수 있는 몇가지 방법이 있습니다

99
00:05:40,380 --> 00:05:42,220
고객들과 이야기 하거나

100
00:05:42,540 --> 00:05:46,040
이런 컨퍼런스를 통해 사람들과 이야기 하거나

101
00:05:46,380 --> 00:05:48,120
버그 리포트를 받거나

102
00:05:48,700 --> 00:05:50,740
이와 같은 새로운 방법을 사용하는 것이죠

103
00:05:51,860 --> 00:05:54,940
우리는 '스프링 이니셜라이저'라는 새 프로젝트가 있습니다

104
00:05:54,940 --> 00:05:57,280
한번도 본 적이 없다면, 네 이건 웹사이트구요

105
00:05:57,900 --> 00:06:00,780
start.spring.io 를 통해 접근 가능합니다

106
00:06:00,780 --> 00:06:03,080
START dot Spring dot

107
00:06:03,580 --> 00:06:04,900
dot IO

108
00:06:06,040 --> 00:06:09,200
오즈의 마법사 도로시 이미지 입니다

109
00:06:10,140 --> 00:06:12,100
뭐 네 어쨌든 음

110
00:06:12,580 --> 00:06:15,460
이 프로젝트에서 여러분은 조금 자세한 정보를 넣을 수 있구요

111
00:06:15,460 --> 00:06:17,700
몇가지 기술적인 선택

112
00:06:17,700 --> 00:06:20,000
즉 여러분이 사용하고자 하는 기술을 선택할 수 있습니다

113
00:06:20,000 --> 00:06:22,700
그럼 우리는 zip 파일을 생성하구요

114
00:06:22,740 --> 00:06:25,860
여러분은 이파일을 다운로드 받아서 프로젝트를 시작할 수 있습니다

115
00:06:27,560 --> 00:06:30,080
여기에서 제공되는 옵션들을 선택할때

116
00:06:30,080 --> 00:06:32,620
몇가지 지표들을 수집 합니다

117
00:06:32,940 --> 00:06:37,640
이 페이지에서 선택 가능한 몇가지에 대한 정보들인데

118
00:06:38,380 --> 00:06:41,340
저희가 지난 12개월 동안 수집한 내용을

119
00:06:41,340 --> 00:06:43,920
여러분들께 보여드리고자 합니다

120
00:06:49,020 --> 00:06:52,320
첫번째는 '뷰 테크놀로지' 인데요

121
00:06:52,980 --> 00:06:56,000
뷰 테크놀로지는 스프링 프레임웍에 오랫동안 존재했구요

122
00:06:56,000 --> 00:06:59,840
코드 베이스의 다른 부분에 독립적인 뷰를 원할때 매우 유용합니다

123
00:07:00,300 --> 00:07:06,020
또한 좋은 API를 제공하는데, 예를 들어 주어진 데이터에 뷰를 보여줘 와 같은 것이죠

124
00:07:06,500 --> 00:07:12,260
스프링 MVC의 매우 초창기 버전부터 여러 타입의 뷰를 플러그인 해서 사용할 수 있었습니다

125
00:07:13,700 --> 00:07:17,440
지난 12개월 동안의 통계를 살펴보죠

126
00:07:18,740 --> 00:07:22,180
여러분이 보고 계신 이 그림에서 제가 말씀드리고 싶은것은

127
00:07:22,440 --> 00:07:24,980
사람들이 스프링 이니셜라이저를 통해

128
00:07:24,980 --> 00:07:27,940
가장 많이 사용하는 것은 바로 Thymeleaf 였습니다

129
00:07:29,500 --> 00:07:31,600
스프링 이니셜라이저에 대해 한가지 아셔야 할 것은

130
00:07:32,100 --> 00:07:33,480
이게 주지 않는 정보가 있는데

131
00:07:34,340 --> 00:07:37,400
처음 선택한 기술에 대한 정보만을 볼 수 있구요

132
00:07:37,400 --> 00:07:40,440
다운로드 받은 이후 변경한 사항에 대해서는 알지 못합니다

133
00:07:40,440 --> 00:07:43,900
프로젝트를 시작한 다음 추가한 사항은 나타나지 않습니다

134
00:07:44,520 --> 00:07:48,760
그럼에도 불구하고 Thymeleaf 가 전체의 75% 를 차지하는 것은 인상적인데요

135
00:07:48,960 --> 00:07:51,040
전체 이니셜라이저 프로젝트에서요

136
00:07:51,280 --> 00:07:55,280
Thymeleaf가 왜 그리 많이 사용되는지 저는 모르겠습니다만

137
00:07:55,280 --> 00:07:57,920
아마도 스프링 인티그레이션이 매우 좋아서겠죠

138
00:07:57,920 --> 00:08:00,840
또는 아주 많은 동영상이나 가이드 때문일지도요

139
00:08:01,800 --> 00:08:06,960
또는 사람들이 템플릿 작업에 html5 스타일을 좋아해서 그럴수도 있습니다

140
00:08:08,700 --> 00:08:11,380
그 외의 기술을 살펴보자면

141
00:08:11,380 --> 00:08:13,280
FreeMarker가 2등이구요

142
00:08:13,380 --> 00:08:17,160
Groovy 템플릿과 Mustache 가 비슷하게 3등을 차지하고 있습니다

143
00:08:18,520 --> 00:08:21,220
이 통계에서 인상적인 부분이 있는데요

144
00:08:21,220 --> 00:08:25,200
Velocity 의 7월과 8월 통계를 보면

145
00:08:25,260 --> 00:08:27,200
절벽에서 떨어진것 같이 사라졌습니다

146
00:08:28,160 --> 00:08:32,140
사람들은 Velocity 를 사용하는 결정을 내리지 않았기에

147
00:08:32,720 --> 00:08:37,400
스프링 프레임워크는 Velocity에 대한 지원을 중단했구요

148
00:08:37,580 --> 00:08:43,460
스프링 부트의 최신 버전을 선택하게 되면 옵션에서 사라졌죠

149
00:08:44,460 --> 00:08:47,120
이건 선택에 있어 아주 중요한 부분입니다

150
00:08:47,120 --> 00:08:49,240
어떤때 우리는 "추가"에 대한 선택을

151
00:08:49,240 --> 00:08:51,460
또 어떤때는 "제거"에 대한 선택을 해야 합니다

152
00:08:52,000 --> 00:08:56,180
이 경우 Velocity 프로젝트는 2010년 부터 시작 되었지만

153
00:08:56,180 --> 00:08:59,980
현재 이 프로젝트는 거의 업데이트가 없다는 것이 확실해졌습니다

154
00:09:00,020 --> 00:09:03,600
그래서 우리는 스프링의 신뢰성을 위해 이 프로젝트를 '제거'했지요

155
00:09:03,600 --> 00:09:04,860
저와 여러분을 위해서요

156
00:09:10,660 --> 00:09:13,160
다른 기술을 살펴보죠

157
00:09:13,160 --> 00:09:15,620
처음부터 인기가 꽤 있었던 기술이구요

158
00:09:15,760 --> 00:09:17,240
NoSQL 입니다

159
00:09:17,360 --> 00:09:20,720
노~~~~~SQL 이죠

160
00:09:24,100 --> 00:09:25,100
음,

161
00:09:25,120 --> 00:09:28,280
NoSQL은 등장부터 굉장한 관심사였죠

162
00:09:28,540 --> 00:09:30,040
NoSQL이 처음 등장할때

163
00:09:30,040 --> 00:09:32,940
여러 매체의 헤드라인을 통해 여러분이 접했던건

164
00:09:33,300 --> 00:09:35,180
SQL데이터베이스는 이제 죽는가?

165
00:09:36,080 --> 00:09:37,960
SQL 은 없어질 것인가?

166
00:09:38,180 --> 00:09:41,960
또는 이런 사람들이 클릭할만한 제목을 가져다 붙이곤 했습니다

167
00:09:42,720 --> 00:09:44,720
[청중 웃음]

168
00:09:45,500 --> 00:09:48,140
심지어 대학교에서도

169
00:09:48,140 --> 00:09:50,220
"관계형 모델과 SQL이 끝났다고 한다

170
00:09:50,220 --> 00:09:52,720
아 근데 기분이 별로 좋지 않네 " 같은 말들이 있었죠

171
00:09:55,840 --> 00:09:56,840
그리고

172
00:09:57,040 --> 00:09:59,980
하지만 사실 실제 저런 제목의 링크를 클릭해서 내용을 읽어보면

173
00:09:59,980 --> 00:10:03,000
여러분이 알게되는 것은

174
00:10:03,000 --> 00:10:05,860
그 반대였죠. SQL이 필요한 영역은 아직 있다는 것입니다

175
00:10:05,980 --> 00:10:08,920
이런게 사실 개발자들이 주의해야 할 점이죠

176
00:10:08,980 --> 00:10:12,440
새로운 기술이 매우 높은 관심으로 등장할때

177
00:10:12,520 --> 00:10:14,920
'모든 문제를 해결할 것'처럼 생각합니다

178
00:10:15,120 --> 00:10:16,100
그리고

179
00:10:16,380 --> 00:10:19,560
소프트웨어 엔지니어링에 '만능 도구'는 없죠

180
00:10:19,760 --> 00:10:22,340
여러분은 새로운 기술이 어떤것인지

181
00:10:22,860 --> 00:10:24,960
어떤 문제를 해결하는지 알아야 합니다

182
00:10:24,960 --> 00:10:28,200
이런 새로운 도구는 절대 모든 문제를 한번에 해결해 주지 않아요

183
00:10:33,520 --> 00:10:36,600
NoSQL은 알려진것과는 조금 다른 의미를 가지는데

184
00:10:36,600 --> 00:10:39,140
이건 No SQL 이라는 의미가 아닙니다

185
00:10:39,140 --> 00:10:42,260
사실은 Not Only SQL이라는 의미죠

186
00:10:42,260 --> 00:10:44,840
하지만 현실 세계에서는 "거의 대부분 SQL 밖에" 이구요

187
00:10:44,840 --> 00:10:48,760
또는 NoSQL은 안돼! 의 의미이기도 합니다

188
00:10:50,900 --> 00:10:54,300
음 그래서 여기 다시 통계를 살펴보면

189
00:10:55,140 --> 00:10:58,180
다시 여기서 주목할 점은 바로

190
00:10:58,180 --> 00:11:01,520
하나의 기술이 굉장히 많이 사용된다는 사실입니다

191
00:11:01,520 --> 00:11:03,420
바로 JPA 입니다

192
00:11:03,420 --> 00:11:06,900
관계형 데이터베이스와 오브젝트를 매핑하는 도구죠

193
00:11:07,500 --> 00:11:10,460
다른 것들을 좀 더 살펴보자면

194
00:11:10,460 --> 00:11:13,640
MongoDB가 나머지의 일부분을 차지하구요

195
00:11:13,640 --> 00:11:17,540
Redis 역시 매우 유명한 선택지중 하나죠

196
00:11:17,940 --> 00:11:21,900
캐싱이나  세션 관리에 매우 뛰어난 도구로 자주 선택됩니다

197
00:11:22,260 --> 00:11:25,500
나머지는 그 비슷한것들이 비슷하게 사용됩니다

198
00:11:31,340 --> 00:11:34,320
NoSQL 이 매우 높은 관심을 받고 있을때

199
00:11:34,320 --> 00:11:38,100
다른 영역에서 비슷한 수준으로 관심을 받고 있던것이 바로

200
00:11:38,340 --> 00:11:40,200
12 factor 애플리케이션이었습니다

201
00:11:40,960 --> 00:11:44,120
아 아닙니다. 이건 이제 '클라우드 네이티브' 애플리케이션으로 불리죠

202
00:11:44,400 --> 00:11:47,220
그리고 이런 내용들을 특별히

203
00:11:47,540 --> 00:11:49,600
플랫폼 as a 서비스와 결합하면

204
00:11:50,180 --> 00:11:52,780
죄송합니다. "클라우드 애플리케이션 플랫폼" 이죠

205
00:11:52,920 --> 00:11:55,140
아뇨 "서버리스" 입니다

206
00:11:55,680 --> 00:11:59,040
아마 우리는 지루해질때까지 이 이름을 바꿀것 같아요

207
00:11:59,300 --> 00:12:02,780
[청중 웃음]

208
00:12:07,320 --> 00:12:10,480
스프링은 이 모든 것들에 해법을 가지고 있어 매우 행운입니다

209
00:12:10,480 --> 00:12:12,680
우리가 가진, 음 제가 말씀 드릴건

210
00:12:12,680 --> 00:12:16,080
스프링 부트와 스프링 클라우드를

211
00:12:16,080 --> 00:12:18,820
피보탈 클라우드 팔레로울레오

212
00:12:18,900 --> 00:12:22,780
피보탈 클라우드 파운드리를 '배포' 플랫폼으로 선택할 수 있다는 점 입니다

213
00:12:23,200 --> 00:12:26,400
여러분은 이 행사를 통해 이 기술들의 조합이 굉장한 성공을 이루고 있다는 내용을

214
00:12:26,400 --> 00:12:29,040
다양한 사례를 통해 들어보실 수 있습니다

215
00:12:29,940 --> 00:12:32,040
하지만 여러분이 기억하셔야 할 것은,

216
00:12:32,040 --> 00:12:34,480
이 또한 하나의 선택에 불과하다는 점 입니다

217
00:12:34,480 --> 00:12:37,820
여러분은 지금도 예전과 같은 모놀리틱 애플리케이션을 만들어

218
00:12:37,860 --> 00:12:39,760
피보탈 클라우드 파운드리에 배포할 수 있구요

219
00:12:39,900 --> 00:12:44,400
클라우드에 개발하고 있지 않더라도 스프링 클라우드의 일부를 사용할 수도 있으며

220
00:12:44,620 --> 00:12:48,640
굳이 마이크로 서비스가 아니더라도 스프링 부트를 사용할 수 있습니다

221
00:12:50,300 --> 00:12:54,280
스프링 부트 개발자인 우리가 두려워 하는것 중 하나는

222
00:12:54,440 --> 00:12:58,460
스프링 부트를 마이크로 서비스 프레임워크로만 생각하는 것입니다

223
00:12:59,200 --> 00:13:02,420
사실 스프링 부트는 마이크로 서비스 프레임워크라기 보다는

224
00:13:02,420 --> 00:13:05,440
일반적인 애플리케이션 개발용, 즉 범용 프레임워크이며

225
00:13:05,440 --> 00:13:08,320
많은 사람들이 마이크로서비스 구현에 사용하고 있는 것이죠

226
00:13:08,320 --> 00:13:11,180
저를 믿지 않으신다면 이 스프링 부트의 Concourse 빌드를 봐 주세요

227
00:13:11,640 --> 00:13:13,700
이건 341 빌드구요

228
00:13:14,080 --> 00:13:15,640
이건 배포 테스트인데요

229
00:13:15,720 --> 00:13:19,040
스프링 팀은 지금까지의 모든 커밋을 기존의 클래식 환경에 배포 테스트 하고 있습니다

230
00:13:19,340 --> 00:13:24,080
이건 여러분들에게 지금까지 스프링을 사용했던 방법을 계속해서 제공하기 위한 것이죠

231
00:13:30,380 --> 00:13:33,380
지금까지가 스프링이 어떻게 선택을 하는지에 대한 것이었구요

232
00:13:33,380 --> 00:13:36,500
여러분, 여러분의 애플리케이션은 어떤가요

233
00:13:36,560 --> 00:13:40,660
여러분은 어떻게 애플리케이션을 '필요하게' 유지하고 있나요

234
00:13:42,320 --> 00:13:45,340
많은 사람들이 말하는 한가지 방법 중 하나는,

235
00:13:45,340 --> 00:13:47,060
"No" 라고 하는 것입니다

236
00:13:47,780 --> 00:13:51,600
애플의 조니 아이브가 했던 말을 인용하자면

237
00:13:51,820 --> 00:13:54,960
"모든 Yes를 위해서는 수천개의 No가 있다" 는 것입니다

238
00:13:55,380 --> 00:13:58,420
애플의 경우엔 맞는말이긴 한데, 개인적으로는

239
00:13:58,420 --> 00:14:00,580
몇개의 포트에 대해서는 yes라고 했으면 좋았을걸요

240
00:14:01,040 --> 00:14:02,040
네

241
00:14:02,660 --> 00:14:03,660
 

242
00:14:03,700 --> 00:14:06,400
여러분의 소프트웨어에 이런 접근법을 사용하는 것은

243
00:14:06,400 --> 00:14:09,520
꽤 솔깃한데, 예를 들어 이렇게 말하는겁니다.

244
00:14:09,520 --> 00:14:11,980
"아니요 그 기능을 추가안할래요", "아뇨 그 버그는 수정하지 않을래요"

245
00:14:11,980 --> 00:14:15,320
심지어는 "그런건 필요 없어요" 라고 하는 것이죠

246
00:14:17,000 --> 00:14:19,820
제 생각에 진실은

247
00:14:19,820 --> 00:14:22,640
소프트웨어 개발은 좀 더 미묘한 문제인데요

248
00:14:22,640 --> 00:14:25,860
만약 여러분이 No만 반복한다면, 침체될 것입니다

249
00:14:26,460 --> 00:14:29,460
반대로 Yes만 말하게 된다면, 여러분의 소프트웨어엔

250
00:14:29,460 --> 00:14:31,220
너무 많은 변화가 발생할거에요

251
00:14:31,220 --> 00:14:33,660
이 사이의 어딘가에 여러분의 소프트웨어를 두어

252
00:14:33,660 --> 00:14:35,220
"유용"하도록 해야 합니다

253
00:14:35,540 --> 00:14:38,540
Onsi 가 자주 사용하는 관점을 인용하자면

254
00:14:38,660 --> 00:14:41,140
"졸린" 이모티콘을 쓸건지

255
00:14:41,140 --> 00:14:43,420
"화난" 이모티콘을 쓸건지

256
00:14:43,420 --> 00:14:45,320
그 사이에 있어야 한다는 것이죠

257
00:14:45,620 --> 00:14:48,960
[청중 웃음]

258
00:14:54,280 --> 00:14:58,040
개발자들은 반짝이는걸 좋아하니까, 몇가지 새로운 선택에 대해 말씀드리죠

259
00:14:58,040 --> 00:15:00,360
스프링에 새로나온 기능들 입니다

260
00:15:01,060 --> 00:15:04,060
첫번째로 말씀드릴건 "코틀린" 입니다

261
00:15:08,280 --> 00:15:11,300
아시다시피 코틀린은 새로운 언어구요

262
00:15:11,300 --> 00:15:13,560
젯브레인에 의해 개발되었습니다

263
00:15:13,560 --> 00:15:15,440
인텔리제이 IDE를 만든 바로 그 분들이죠

264
00:15:15,820 --> 00:15:18,520
저는 언어에 매우 흥미로운 동적 요소가 있다고 보는데요

265
00:15:18,640 --> 00:15:22,320
코틀린을 사용할때 엄청난 IDE의 혜택을 볼 수 있다는 점 외에도

266
00:15:22,720 --> 00:15:26,980
코틀린 자체가 IDE의 지원을 받기 어렵지 않게 설계 되었다는 점 입니다

267
00:15:28,600 --> 00:15:31,300
코틀린은 JVM 기반의 언어구요

268
00:15:31,300 --> 00:15:33,980
자바와 굉장히 궁합이 잘 맞습니다

269
00:15:33,980 --> 00:15:37,680
자바 개발자들이 기존의 라이브러리를 사용하기 매우 좋게 되어 있으며

270
00:15:37,940 --> 00:15:41,940
자바 개발자들이 쉽게 배울 수 있는 언어입니다

271
00:15:43,900 --> 00:15:46,760
코틀린이 잘하고 있는 또 다른 부분은

272
00:15:46,760 --> 00:15:50,140
우리 같은 프레임워크 개발자가 익스텐션을 추가하기 좋게 만들었다는 점 입니다

273
00:15:50,140 --> 00:15:52,980
여러분이 스프링 프레임워크의 최신 버전을 다운 받으면

274
00:15:52,980 --> 00:15:55,440
코틀린 지원을 무료로 받을 수 있습니다

275
00:15:55,440 --> 00:15:58,460
코틀린을 지원하기 위해 별도의 다운로드를 받을 필요가 없다는 것이죠

276
00:16:00,080 --> 00:16:03,440
코틀린은 안드로이드 개발에도 사용되고 있구요

277
00:16:03,640 --> 00:16:07,740
이건 여러분의 프론트 엔드와 백엔드 개발자가 동일한 언어를 사용할 수 있다는 의미기도 합니다

278
00:16:08,640 --> 00:16:13,020
그리고 Gradle 역시 코틀린을 Groovy의 예비 DSL 로 지원합니다

279
00:16:15,980 --> 00:16:18,420
여기 샘플 코틀린 코드가 있는데요

280
00:16:18,420 --> 00:16:21,800
새로운 펑셔널 라우터 코드 입니다

281
00:16:21,920 --> 00:16:24,660
API는 스프링 프레임워크 5에서 온 것들이구요

282
00:16:24,660 --> 00:16:27,860
한가지 주목할 만한 점은 제일 아래에

283
00:16:27,860 --> 00:16:30,380
애플리케이션을 코틀린 펑션으로 구동하는

284
00:16:30,380 --> 00:16:33,380
기존의 스프링 애플리케이션 . run 을 대신하는 코드가 있는점 입니다

285
00:16:33,860 --> 00:16:37,140
이건 저희가 제공하는 여러가지 확장 옵션중의 하나죠

286
00:16:40,680 --> 00:16:43,700
제 생각에 이니셜라이저를 통해서

287
00:16:43,700 --> 00:16:46,980
모든 정보를 알 수 있는 통계를 받는건 힘든일입니다

288
00:16:46,980 --> 00:16:49,920
이 그래프를 좀 작게 축소해서 얇은 라인을 살펴보면

289
00:16:49,920 --> 00:16:54,520
아직 사람들은 자바를 많이 사용하고 있지만

290
00:16:54,620 --> 00:16:58,380
지난 12개월 동안 코틀린에 대한 관심이 증가했다는 사실을

291
00:16:58,460 --> 00:17:01,300
확인활 수 있습니다.

292
00:17:01,300 --> 00:17:03,960
우리는 사람들이 코틀린을 배우기 위해서인지, 프로덕션에 사용하는지

293
00:17:03,960 --> 00:17:06,900
자세한 내용은 알 수 없지만,  앞으로도

294
00:17:06,900 --> 00:17:08,360
예의 주시할 예정입니다

295
00:17:14,980 --> 00:17:18,300
두번째로 새로운 선택은 바로, "리액티브"입니다

296
00:17:19,320 --> 00:17:22,380
리액티브 프로그래밍 모델이라는 것은 사실

297
00:17:22,380 --> 00:17:24,660
궁극적으로는 이벤트 드리븐의 도입입니다

298
00:17:24,660 --> 00:17:27,340
더 효율적이고, 스레드 친화적이죠

299
00:17:29,780 --> 00:17:32,800
스프링은 새로운 프레임워크인 웹플럭스를 소개했구요

300
00:17:33,240 --> 00:17:36,080
여러분은 웹플럭스와 스프링MVC를 선택해서 사용할 수 있습니다

301
00:17:36,380 --> 00:17:38,980
이건 맨위부터 아래까지 논블러킹이구요

302
00:17:38,980 --> 00:17:41,000
서블릿 API 를 사용하지 않습니다

303
00:17:41,500 --> 00:17:45,640
그리고 만약 여러분이 MVC를 잘 안다면, 친숙한 프로그래밍 모델을 사용할 수 있습니다

304
00:17:46,620 --> 00:17:49,580
이외에도 몇가지 프로젝트에 업데이트들이 있는데요

305
00:17:49,580 --> 00:17:52,420
스프링 데이터와 스프링 시큐리티에서는

306
00:17:52,420 --> 00:17:58,240
스프링 데이터는 이제  데이터를 논블러킹 방식으로 접근할 수 있도록 합니다

307
00:18:01,260 --> 00:18:04,340
제가 웹플럭스는 서블릿 API를 사용하지 않는다고 했는데요

308
00:18:04,340 --> 00:18:08,420
이 말은 우리가 처음으로 스프링 부트에서 네티를 지원한다는 의미입니다

309
00:18:08,600 --> 00:18:12,400
그래서 만약 여러분이 부트에서 웹 플럭스를 선택한다면

310
00:18:12,400 --> 00:18:14,240
네티가 기본 런타임이 됩니다.

311
00:18:14,880 --> 00:18:18,100
원하신다면 톰캣으로 변경하실수도 있습니다

312
00:18:19,380 --> 00:18:22,200
마지막으로 스프링에서 소개해 드릴 것은 바로

313
00:18:22,200 --> 00:18:23,760
웹 클라이언트인데요

314
00:18:24,500 --> 00:18:27,360
이건 REST template 의 대안으로 선택할 수 있으며

315
00:18:27,420 --> 00:18:31,420
이건 여러분이 리모트 REST Call 을 수행할 수 있도록 하는 도구입니다

316
00:18:31,700 --> 00:18:34,680
이건 아주 자연스럽게 API를 사용할 수 있는 방법을 제공하는데

317
00:18:34,780 --> 00:18:37,260
저희 스프링 팀은 아주 많은 분들이

318
00:18:37,260 --> 00:18:40,200
리액티브를 사용하지 않더라도 웹 클라이언트는 사용할 것이라고 예상하고 있습니다

319
00:18:43,280 --> 00:18:45,120
여기 샘플 웹플럭스 코드가 있는데요

320
00:18:45,120 --> 00:18:48,100
익숙한 RestController를 보실 수 있구요

321
00:18:48,100 --> 00:18:51,040
MVC를 개발해 봤다면 매우 친숙하실 겁니다

322
00:18:51,040 --> 00:18:53,140
가장 큰 다른점은 여기 Mono를 리턴한다는 점인데요

323
00:18:53,140 --> 00:18:56,520
이것 저것을 모아 리액티브로 리턴하는 것이죠

324
00:19:03,080 --> 00:19:06,120
스프링의 리액티브 지원은 매우 흥미로운점이 있는데

325
00:19:06,120 --> 00:19:08,600
아주 유니크한 점 입니다 그건 바로

326
00:19:08,760 --> 00:19:10,680
MVC 를 사용하더라도

327
00:19:10,680 --> 00:19:12,600
리액터의 일부 기능을 사용할 수 있다는 점입니다

328
00:19:13,140 --> 00:19:15,640
음 많은 사람들이 자주 하는 질문 중 하나는

329
00:19:15,640 --> 00:19:18,260
완전 리액티브로 동작하는 논블러킹 스택과

330
00:19:18,260 --> 00:19:21,300
블러킹 기반의 서블릿 스택을 왜 선택해야 하느냐 입니다

331
00:19:22,660 --> 00:19:23,660
이 문제에 대해

332
00:19:24,000 --> 00:19:26,660
가장 잘 설명한 사람이 제 친구인 Rossen 인데요,

333
00:19:26,660 --> 00:19:29,520
그가 설명한 방법을 여러분께 보여드릴께요

334
00:19:30,280 --> 00:19:33,320
블러킹이 지배하는 세상을 먼저 살펴보죠

335
00:19:34,620 --> 00:19:38,540
블러킹과 서블릿에 대한 이해는

336
00:19:39,100 --> 00:19:43,600
스레드를 수영장의 '레인'으로 생각하는 겁니다

337
00:19:44,240 --> 00:19:47,000
아시겠죠? 각각의 레인은 외부 요청을 처리하기 위해

338
00:19:47,000 --> 00:19:49,440
프로세스나 스레드의 시작과 끝을 의미합니다

339
00:19:49,900 --> 00:19:52,260
그래서 요청을 받게 되면

340
00:19:52,260 --> 00:19:53,980
여기 이 오리가 바로 '요청'입니다

341
00:19:54,860 --> 00:19:57,620
요청이 스레드 안에 있을때

342
00:19:57,620 --> 00:20:00,020
프로세스 내에서 시작에서 끝까지 처리됩니다

343
00:20:00,500 --> 00:20:01,660
 

344
00:20:02,100 --> 00:20:04,420
음, 이건 아주 잘 동작하는 기술입니다

345
00:20:04,420 --> 00:20:07,400
사실 굉장히 확장성이 있구요

346
00:20:07,400 --> 00:20:10,260
굉장히 많은 서비스에서 사용되어 왔고

347
00:20:10,260 --> 00:20:13,360
인터넷의 수많은 서비스들이 이 구조에 기반합니다

348
00:20:14,360 --> 00:20:16,320
하지만 좋지 않은 부분을 보면

349
00:20:17,360 --> 00:20:20,100
예를 들어 성능에 영향을 미치는 요청,

350
00:20:20,100 --> 00:20:23,060
아주 느린 요청이 유입되면

351
00:20:23,060 --> 00:20:26,040
음 여기 이 '고양이'로 대표되는 요청이죠

352
00:20:27,500 --> 00:20:30,820
이 요청이 수영장의 레인에 있는 동안에는

353
00:20:30,920 --> 00:20:31,920
 

354
00:20:32,800 --> 00:20:35,780
스레드는 아무것도 하지 못하는 상태가 됩니다

355
00:20:35,780 --> 00:20:38,000
이 요청이 종료될때 까지는 말이죠

356
00:20:38,000 --> 00:20:39,940
모바일 장치를 위한 서비스나

357
00:20:39,940 --> 00:20:41,660
여러분이 만든 리모트 콜과 같은것들

358
00:20:42,000 --> 00:20:45,620
이런게 여러분의 애플리케이션을 '더 낮은 효율'로 동작하게 할 수 있습니다

359
00:20:46,260 --> 00:20:49,400
이런 애플리케이션을 확장하는 유일한 방법은

360
00:20:49,400 --> 00:20:51,740
더 많은 레인을 추가, 즉 더 많은 스레드를 확보하는 것이죠

361
00:20:51,740 --> 00:20:54,700
아시다시피 그저 더 많은 레인을 추가하는 것은

362
00:20:54,700 --> 00:20:59,720
애플리케이션에 스레드를 추가하는것 모두 돈이 드는 방법입니다

363
00:21:04,500 --> 00:21:07,540
이제 논 블러킹 리액티브 세상을 살펴보면

364
00:21:07,540 --> 00:21:11,460
이건 마치 공항의 활주로 처럼 이해할 수 있습니다

365
00:21:12,520 --> 00:21:16,160
심지어 가장 바쁜 공항이라 할 지라도

366
00:21:16,340 --> 00:21:18,820
활주로는 많지 않습니다

367
00:21:18,880 --> 00:21:23,860
왜냐하면 활주로는 이륙이나 착륙때만 사용하기 때문이죠

368
00:21:23,860 --> 00:21:25,800
그래서 요청을 받게 되면

369
00:21:26,000 --> 00:21:28,540
여기 이 오리가 바로 그 요청인데요

370
00:21:30,660 --> 00:21:35,620
이 오리가 이륙을 마치고 활주로가 비게 되면

371
00:21:35,740 --> 00:21:38,580
활주로는 다시 사용가능 상태가 되죠

372
00:21:38,580 --> 00:21:41,180
만약 '느린 요청'이 발생하더라도

373
00:21:41,800 --> 00:21:45,040
여기 이 고양이로 표현 될 수 있는 그 요청은,

374
00:21:45,040 --> 00:21:46,060
 

375
00:21:46,360 --> 00:21:49,860
이 고양이가 이륙을 하고 나면, 그러니까 요청이 끝나면

376
00:21:50,000 --> 00:21:53,180
스레드는 다른일을 할 수 있게 되는거죠

377
00:21:53,180 --> 00:21:56,620
12시간 비행하는 동안 여러분이 이륙한 활주로는

378
00:21:56,660 --> 00:22:00,340
아무것도 하지 않는 상태로 대기하지 않습니다

379
00:22:03,080 --> 00:22:04,080
 

380
00:22:04,100 --> 00:22:07,020
여러분이 무슨 생각하는지, 음 대충 알겠는데요

381
00:22:07,020 --> 00:22:09,940
지금 이 세션동안 엄청나게 많은 것이 지나갔죠. 카멜레온이나

382
00:22:09,940 --> 00:22:12,900
오래된 전화기,  아답터 같은 것들

383
00:22:13,460 --> 00:22:16,020
이 사람이 뭐였는지 기억 안나지만

384
00:22:16,020 --> 00:22:18,420
세가지 다른 상태의 이모티콘,

385
00:22:18,420 --> 00:22:21,300
엄청나게 많은 스프링 프로젝트들

386
00:22:21,300 --> 00:22:25,220
나는 고양이, 수영하는 고양이, 오리들

387
00:22:25,340 --> 00:22:28,960
죽은 새, 그리고  새로운 기술들

388
00:22:28,960 --> 00:22:29,960
 

389
00:22:30,380 --> 00:22:31,380
 

390
00:22:31,520 --> 00:22:33,020
엄청나게 많은 것들이 있었어요

391
00:22:33,480 --> 00:22:34,480
 

392
00:22:35,280 --> 00:22:36,660
혼란스럽죠

393
00:22:37,200 --> 00:22:40,440
저는 여러분께 '걱정마시라'고 말하고 싶습니다

394
00:22:40,440 --> 00:22:41,395
 

395
00:22:41,400 --> 00:22:43,220
우리가 여러분의 뒤에 있습니다

396
00:22:43,580 --> 00:22:45,180
우린 여기에 배움을 돕기 위해 왔구요

397
00:22:45,940 --> 00:22:49,820
지금 이 컨퍼런스는 이 모든 것들이 모인 장소입니다

398
00:22:50,200 --> 00:22:52,740
만약 여러분이 세션을 선택해서 듣다가

399
00:22:52,740 --> 00:22:54,300
아 이거 잘못 왔다고 생각되면

400
00:22:54,680 --> 00:22:56,220
안심하세요

401
00:22:56,900 --> 00:23:00,000
이 키노트를 포함해서 모든게 유튜브에 업로드 될겁니다

402
00:23:00,000 --> 00:23:01,960
나중에 볼 수 있으니까요.

403
00:23:01,960 --> 00:23:03,940
감사합니다

